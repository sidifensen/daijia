spring.application.name=service-customer
spring.profiles.active=dev
spring.main.allow-bean-definition-overriding=true
spring.cloud.nacos.discovery.server-addr=192.168.6.129:8848
spring.cloud.nacos.config.server-addr=192.168.6.129:8848
spring.cloud.nacos.config.prefix=${spring.application.name}
spring.cloud.nacos.config.file-extension=yaml
#spring.cloud.nacos.config.shared-configs[0].refresh=true
spring.cloud.nacos.config.shared-configs[0].data-id=common-account.yaml
#spring.cloud.nacos.config.shared-configs[0].group=DEFAULT_GROUP


# spring.cloud.nacos.config.shared-configs[0].refresh=true  配置需要在运行时动态更新


#spring.profiles.active=dev：这行配置指定了当前应用程序的活动配置文件为 dev。
# 在 Spring Boot 和 Spring Cloud 的上下文中，当应用程序运行时，
# 它会根据所激活的 profile 自动调整配置加载的方式和内容。
#当程序需要从 Nacos 加载配置文件时，
# 它会根据 spring.cloud.nacos.config.prefix 的值（在你的案例中是 service-customer）
# 结合 spring.profiles.active 的值（在这里是 dev）来确定要加载的完整配置文件名称。
# 具体来说，Nacos 在查找配置文件时，会拼接 -dev 后缀到前缀上。
#   - 符号是用于将前缀和环境标识符连接的约定

# spring.main.allow-bean-definition-overriding=true
# 主要用于控制 Spring 容器中 Bean 定义的行为，允许同名 Bean 的重写

#spring.cloud.nacos.config.prefix=${spring.application.name}
#将 Nacos 配置的前缀设置为目前应用的名称
#主要功能是指定从 Nacos 配置中心获取的配置项的前缀，前缀由当前应用程序的名称决定
#每个应用程序可以根据其名称动态生成自己的配置前缀，这提供了灵活性，
# 使得应用在 Nacos 中的配置能够根据名称进行分类，从而避免了不同应用之间的配置冲突。
#通过前缀机制，开发人员可以更方便地管理和维护不同应用程序的配置，确保了配置的清晰和逻辑性。

#spring.cloud.nacos.config.file-extension=yaml
#这行代码的主要功能是在使用 Spring Cloud Nacos 作为配置中心时，
# 指明从 Nacos 获取的配置文件的文件格式为 YAML。这意味着，
# 应用程序将以 YAML 格式来读取和解析从 Nacos 中获取的配置信息


#spring.cloud.nacos.config.shared-configs[0].data-id=common-account.yaml
#shared-configs 是一个列表，用于定义多个共享配置。
# 共享配置允许多个服务共享同一份配置文件。这样，当配置更新时，多服务可以自动获取到最新的配置。
#[0] 表示我们在访问 shared-configs 列表中的第一个元素。在这种情况下，我们只定义了一个共享配置（索引为 0）
#data-id 是共享配置文件的唯一标识符。通过这个标识，应用程序能够明确地定位到具体的配置文件。
# #data-id=common-account.yaml 指定了共享配置的标识符。
# common-account.yaml 是在 Nacos 中储存的配置文件的名称，应用程序将从 Nacos 获取该配置文件的内容。
#这行代码的主要功能是告诉 Spring Cloud Nacos，应用程序需要从 Nacos 配置中心的共享配置中
# 加载一个名为 common-account.yaml 的配置文件。这使得多个服务能够共享同一份配置文件，
# 有助于集中管理和动态更新配置，提升了系统的灵活性和可维护性。